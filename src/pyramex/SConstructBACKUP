import distutils.sysconfig
import os
import sys

PYTHON_LIBPATH = distutils.sysconfig.get_python_lib()
PYTHON_INCPATH = distutils.sysconfig.get_python_inc()
PYTHON_LIBRARY = "python" + sys.version[:3]

print 'PYTHON_LIBPATH: ' + PYTHON_LIBPATH
print 'PYTHON_INCPATH: ' + PYTHON_INCPATH
print 'PYTHON_LIBRARY: ' + PYTHON_LIBRARY

env = Environment(ENV = os.environ)

env.AppendUnique(LIBPATH=[PYTHON_LIBPATH], CPPPATH=[PYTHON_INCPATH])

if ARGUMENTS.get('VERBOSE') != '1':
    env['CCCOMSTR']   = "Compiling $TARGET"
    env['LINKCOMSTR'] = "Linking $TARGET"

Progress('$TARGET\r', overwrite=True)

env.Decider('MD5-timestamp')











# This builder takes the cython source code and generates c code.
cythonBuilder = Builder(action ='cython $SOURCE',
                        suffix = '.c',
                        src_suffix = '.pyx')

# Setup the compilation environment.
env = Environment(PYEXT_USE_DISTUTILS=True,
            ENV = os.environ,
            tools=['mingw'],
            BUILDERS={'Py2C':cythonBuilder},
            CCFLAGS='-LC:\Python27\libs -IC:\Python27\include',
            LINKFLAGS='-lpython2.7 -shared -o $SOURCE')

# Method that calls routines neccessary to create shared library.
def cythonPseudoBuilder(env,source):
    cCode = env.Py2C(source)
    #env.SharedLibrary(source,cCode,LIBPREFIX='')

env.AddMethod(cythonPseudoBuilder,'Cython')

env.Cython('c1')

#env.SharedLibrary('c1.pyd', ['c1.c'])


c1_module = env.LoadableModule('c1.pyd', ['c1.c'])




#import setup

#for ext in setup.get_extensions():
#	print e.sources[:]

#env.Command('hello.pyd', '', 'python setup.py build_ext --compiler=mingw32 --inplace')